@page "/manage-events"
@using ClassLibraryDal
@inject EventService EventService
@inject NavigationManager Navigation

<div class="container mt-4" style="background-color: #f8f9fa; border-radius: 8px; padding: 20px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="text-primary">Manage Events</h3>
        <button class="btn btn-success shadow-sm" @onclick="NavigateToAddEvent">Add Event</button>
    </div>

    @if (events != null && events.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover align-middle" style="background-color: #ffffff; border-radius: 8px; overflow: hidden;">
                <thead class="table-dark">
                    <tr>
                        <th>
                            <input type="checkbox" @onclick="ToggleAll" />
                        </th>
                        <th>ID</th>
                        <th>Event Name</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var eventItem in events)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" @bind="eventItem.IsSelected" />
                            </td>
                            <td>@eventItem.Id</td>
                            <td>@eventItem.Name</td>
                            <td>@eventItem.Date.ToShortDateString()</td>
                            <td>@eventItem.Time</td>
                            <td>@eventItem.Description</td>
                            <td>
                                <button class="btn btn-primary btn-sm shadow-sm" @onclick="() => ViewEvent(eventItem.Id)">View</button>
                                <button class="btn btn-info btn-sm shadow-sm mx-1" @onclick="() => OpenEditDialog(eventItem)">Edit</button>
                                <button class="btn btn-danger btn-sm shadow-sm" @onclick="() => DeleteEvent(eventItem.Id)">Delete</button>
                                <button class="btn btn-dark btn-sm shadow-sm" @onclick="() => NavigateToInvoice(eventItem.Id)">Invoice</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <button class="btn btn-danger shadow-sm mt-3" @onclick="DeleteSelectedEvents">Delete Selected</button>
    }
    else
    {
        <p class="text-center text-muted">No events available.</p>
    }
</div>

@code {
    private List<Event> events = new();
    private bool selectAll = false;
    private bool showEditDialog = false;
    private Event selectedEvent = new();

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetEvents();
    }

    private void NavigateToAddEvent()
    {
        Navigation.NavigateTo("/create-event");
    }

    private void ViewEvent(int id)
    {
        Navigation.NavigateTo($"/view-event/{id}");
    }

    private async Task DeleteEvent(int id)
    {
        await EventService.DeleteEvent(id);
        events = await EventService.GetEvents();
    }

    private void ToggleAll()
    {
        selectAll = !selectAll;
        foreach (var ev in events)
        {
            ev.IsSelected = selectAll;
        }
    }

    private async Task DeleteSelectedEvents()
    {
        var selectedIds = events.Where(e => e.IsSelected).Select(e => e.Id).ToList();
        if (selectedIds.Any())
        {
            await EventService.DeleteMultipleEvents(selectedIds);
            events = await EventService.GetEvents();
        }
    }

    private void OpenEditDialog(Event eventToEdit)
    {
        selectedEvent = eventToEdit;
        showEditDialog = true;
    }

    private void CloseEditDialog()
    {
        showEditDialog = false;
        selectedEvent = new Event();
    }

    private async Task SaveEvent()
    {
        await EventService.UpdateEvent(selectedEvent);
        events = await EventService.GetEvents();
        CloseEditDialog();
    }

    private void NavigateToInvoice(int eventId)
    {
        Navigation.NavigateTo($"/invoice/{eventId}");
    }
}
